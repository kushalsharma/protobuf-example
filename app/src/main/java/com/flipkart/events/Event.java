// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: flipkart/events/event.proto at 8:1
package com.flipkart.events;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Event extends Message<Event, Event.Builder> {
  public static final ProtoAdapter<Event> ADAPTER = new ProtoAdapter_Event();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_EVENT = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String event;

  @WireField(
      tag = 2,
      adapter = "com.flipkart.events.Event$VisitData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VisitData> visitData;

  public Event(String event, List<VisitData> visitData) {
    this(event, visitData, ByteString.EMPTY);
  }

  public Event(String event, List<VisitData> visitData, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.event = event;
    this.visitData = Internal.immutableCopyOf("visitData", visitData);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.event = event;
    builder.visitData = Internal.copyOf("visitData", visitData);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Event)) return false;
    Event o = (Event) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(event, o.event)
        && visitData.equals(o.visitData);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (event != null ? event.hashCode() : 0);
      result = result * 37 + visitData.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (event != null) builder.append(", event=").append(event);
    if (!visitData.isEmpty()) builder.append(", visitData=").append(visitData);
    return builder.replace(0, 2, "Event{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Event, Builder> {
    public String event;

    public List<VisitData> visitData;

    public Builder() {
      visitData = Internal.newMutableList();
    }

    public Builder event(String event) {
      this.event = event;
      return this;
    }

    public Builder visitData(List<VisitData> visitData) {
      Internal.checkElementsNotNull(visitData);
      this.visitData = visitData;
      return this;
    }

    @Override
    public Event build() {
      return new Event(event, visitData, super.buildUnknownFields());
    }
  }

  public static final class Data extends Message<Data, Data.Builder> {
    public static final ProtoAdapter<Data> ADAPTER = new ProtoAdapter_Data();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_LISTINGID = "";

    public static final String DEFAULT_PRODUCTID = "";

    public static final String DEFAULT_REQUESTID = "";

    public static final Long DEFAULT_TIMESTAMP = 0L;

    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String listingId;

    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String productId;

    @WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String requestId;

    @WireField(
        tag = 4,
        adapter = "com.squareup.wire.ProtoAdapter#INT64"
    )
    public final Long timestamp;

    public Data(String listingId, String productId, String requestId, Long timestamp) {
      this(listingId, productId, requestId, timestamp, ByteString.EMPTY);
    }

    public Data(String listingId, String productId, String requestId, Long timestamp, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.listingId = listingId;
      this.productId = productId;
      this.requestId = requestId;
      this.timestamp = timestamp;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.listingId = listingId;
      builder.productId = productId;
      builder.requestId = requestId;
      builder.timestamp = timestamp;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Data)) return false;
      Data o = (Data) other;
      return unknownFields().equals(o.unknownFields())
          && Internal.equals(listingId, o.listingId)
          && Internal.equals(productId, o.productId)
          && Internal.equals(requestId, o.requestId)
          && Internal.equals(timestamp, o.timestamp);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (listingId != null ? listingId.hashCode() : 0);
        result = result * 37 + (productId != null ? productId.hashCode() : 0);
        result = result * 37 + (requestId != null ? requestId.hashCode() : 0);
        result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (listingId != null) builder.append(", listingId=").append(listingId);
      if (productId != null) builder.append(", productId=").append(productId);
      if (requestId != null) builder.append(", requestId=").append(requestId);
      if (timestamp != null) builder.append(", timestamp=").append(timestamp);
      return builder.replace(0, 2, "Data{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Data, Builder> {
      public String listingId;

      public String productId;

      public String requestId;

      public Long timestamp;

      public Builder() {
      }

      public Builder listingId(String listingId) {
        this.listingId = listingId;
        return this;
      }

      public Builder productId(String productId) {
        this.productId = productId;
        return this;
      }

      public Builder requestId(String requestId) {
        this.requestId = requestId;
        return this;
      }

      public Builder timestamp(Long timestamp) {
        this.timestamp = timestamp;
        return this;
      }

      @Override
      public Data build() {
        return new Data(listingId, productId, requestId, timestamp, super.buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Data extends ProtoAdapter<Data> {
      ProtoAdapter_Data() {
        super(FieldEncoding.LENGTH_DELIMITED, Data.class);
      }

      @Override
      public int encodedSize(Data value) {
        return (value.listingId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.listingId) : 0)
            + (value.productId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.productId) : 0)
            + (value.requestId != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.requestId) : 0)
            + (value.timestamp != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.timestamp) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Data value) throws IOException {
        if (value.listingId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.listingId);
        if (value.productId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.productId);
        if (value.requestId != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.requestId);
        if (value.timestamp != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.timestamp);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Data decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.listingId(ProtoAdapter.STRING.decode(reader)); break;
            case 2: builder.productId(ProtoAdapter.STRING.decode(reader)); break;
            case 3: builder.requestId(ProtoAdapter.STRING.decode(reader)); break;
            case 4: builder.timestamp(ProtoAdapter.INT64.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Data redact(Data value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public static final class VisitData extends Message<VisitData, VisitData.Builder> {
    public static final ProtoAdapter<VisitData> ADAPTER = new ProtoAdapter_VisitData();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_VISITID = "";

    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String visitId;

    @WireField(
        tag = 2,
        adapter = "com.flipkart.events.Event$Data#ADAPTER",
        label = WireField.Label.REPEATED
    )
    public final List<Data> data;

    public VisitData(String visitId, List<Data> data) {
      this(visitId, data, ByteString.EMPTY);
    }

    public VisitData(String visitId, List<Data> data, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.visitId = visitId;
      this.data = Internal.immutableCopyOf("data", data);
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.visitId = visitId;
      builder.data = Internal.copyOf("data", data);
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof VisitData)) return false;
      VisitData o = (VisitData) other;
      return unknownFields().equals(o.unknownFields())
          && Internal.equals(visitId, o.visitId)
          && data.equals(o.data);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (visitId != null ? visitId.hashCode() : 0);
        result = result * 37 + data.hashCode();
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (visitId != null) builder.append(", visitId=").append(visitId);
      if (!data.isEmpty()) builder.append(", data=").append(data);
      return builder.replace(0, 2, "VisitData{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<VisitData, Builder> {
      public String visitId;

      public List<Data> data;

      public Builder() {
        data = Internal.newMutableList();
      }

      public Builder visitId(String visitId) {
        this.visitId = visitId;
        return this;
      }

      public Builder data(List<Data> data) {
        Internal.checkElementsNotNull(data);
        this.data = data;
        return this;
      }

      @Override
      public VisitData build() {
        return new VisitData(visitId, data, super.buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_VisitData extends ProtoAdapter<VisitData> {
      ProtoAdapter_VisitData() {
        super(FieldEncoding.LENGTH_DELIMITED, VisitData.class);
      }

      @Override
      public int encodedSize(VisitData value) {
        return (value.visitId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.visitId) : 0)
            + Data.ADAPTER.asRepeated().encodedSizeWithTag(2, value.data)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, VisitData value) throws IOException {
        if (value.visitId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.visitId);
        Data.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.data);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public VisitData decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.visitId(ProtoAdapter.STRING.decode(reader)); break;
            case 2: builder.data.add(Data.ADAPTER.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public VisitData redact(VisitData value) {
        Builder builder = value.newBuilder();
        Internal.redactElements(builder.data, Data.ADAPTER);
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_Event extends ProtoAdapter<Event> {
    ProtoAdapter_Event() {
      super(FieldEncoding.LENGTH_DELIMITED, Event.class);
    }

    @Override
    public int encodedSize(Event value) {
      return (value.event != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.event) : 0)
          + VisitData.ADAPTER.asRepeated().encodedSizeWithTag(2, value.visitData)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Event value) throws IOException {
      if (value.event != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.event);
      VisitData.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.visitData);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Event decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.event(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.visitData.add(VisitData.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Event redact(Event value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.visitData, VisitData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
